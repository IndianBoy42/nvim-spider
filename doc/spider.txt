*spider.txt*             For NVIM v0.8.0            Last change: 2023 April 06

==============================================================================
Table of Contents                                   *spider-table-of-contents*

1. nvim-spider                                           |spider-nvim-spider-|
  - Features                                    |spider-nvim-spider--features|
  - Installation                            |spider-nvim-spider--installation|
  - Configuration                          |spider-nvim-spider--configuration|
  - Credits                                      |spider-nvim-spider--credits|

==============================================================================
1. nvim-spider                                           *spider-nvim-spider-*

Usethe `w`, `e`, `b` motions like a spider. Move by subwords and skip
insignificant punctuation.

Lua implementation of CamelCaseMotion. Works in normal, visual, and
operator-pending mode. Works with counts and is dot-repeatable.


  **Note** If you installed the plugin before March 31, you should change your
  keymappings to call the motions via Ex-commands: `"lua
  require('spider').motion("w”)“. This makes them dot-repeatable if used in
  operator-pending mode. |spider-see-the-examples-here.|

- |spider-features|
    - |spider-subword-motion|
    - |spider-skipping-insignificant-punctuation|
    - |spider-text-object|
- |spider-installation|
- |spider-credits|


FEATURES                                        *spider-nvim-spider--features*

The `w`, `e`, `b` (and `ge`) motions work the same as the default ones by vim,
except for two differences:


SUBWORD MOTION ~

The movements happen by subwords, meaning it stops at the sub-parts of a
CamelCase (or SCREAMING_SNAKE_CASE or kebab-case) variable.

>lua
    -- positions vim's `w` will move to
    local myVariableName = FOO_BAR_BAZ
    --    ^              ^ ^
    
    -- positions spider's `w` will move to
    local myVariableName = FOO_BAR_BAZ
    --    ^ ^       ^    ^ ^   ^   ^
<


SKIPPING INSIGNIFICANT PUNCTUATION ~

A sequence of one or more punctuation characters is considered significant if
it is surrounded by whitespace and does not include any non-punctuation
characters.

>lua
    foo == bar .. "baz"
    --  ^      ^    significant punctuation
    
    foo:find("a")
    -- ^    ^  ^  insignificant punctuation
<

This speeds up the movement across the line by reducing the number of mostly
unnecessary stops.

>lua
    -- positions vim's `w` will move to
    if foo:find("%d") and foo == bar then print("[foo] has" .. bar) end
    -- ^  ^^   ^  ^^  ^   ^   ^  ^   ^    ^    ^  ^  ^ ^  ^ ^  ^  ^ ^  -> 21
    
    -- positions spider's `w` will move to
    if foo:find("%d") and foo == bar then print("[foo] has" .. bar) end
    -- ^   ^      ^   ^   ^   ^  ^   ^    ^       ^    ^    ^  ^    ^  -> 14
<

If you prefer to use this plugin only for subword motion, you can disable this
feature by setting `skipInsignificantPunctuation = false` in the `.setup()`
call.


  **Note** vim’s `iskeyword` option is ignored by this plugin.

TEXT OBJECT ~

For an alternative `iw` text object that considers CamelCase word parts, check
out the "subword" text object of nvim-various-textobjs
<https://github.com/chrisgrieser/nvim-various-textobjs>.


INSTALLATION                                *spider-nvim-spider--installation*

>lua
    -- packer
    use { "chrisgrieser/nvim-spider" }
    
    -- lazy.nvim
    { "chrisgrieser/nvim-spider", lazy = true },
<

No keybindings are created by default. Below are the mappings to replace the
default `w`, `e`, and `b` motions with this plugin’s version of them.

>lua
    vim.keymap.set({"n", "o", "x"}, "w", "<cmd>lua require('spider').motion('w')<CR>", { desc = "Spider-w" })
    vim.keymap.set({"n", "o", "x"}, "e", "<cmd>lua require('spider').motion('e')<CR>", { desc = "Spider-e" })
    vim.keymap.set({"n", "o", "x"}, "b", "<cmd>lua require('spider').motion('b')<CR>", { desc = "Spider-b" })
    vim.keymap.set({"n", "o", "x"}, "ge", "<cmd>lua require('spider').motion('ge')<CR>", { desc = "Spider-ge" })
<


  **Note** Note that for dot-repeat to work properly, you have to call this
  plugin’s motions as Ex-command. Calling `function()
  require("spider").motion("w") end` as third argument of the keymap do _not_
  support dot-repeatability.

CONFIGURATION                              *spider-nvim-spider--configuration*

The `.setup()` call is optional. Currently, its only option is to disable the
skipping of insignificant punctuation:

>lua
    -- default value
    require("spider").setup({
        skipInsignificantPunctuation = true
    })
<


CREDITS                                          *spider-nvim-spider--credits*

**Thanks** - To `@vypxl` and `@ii14` for figuring out dot-repeatability.
<https://github.com/chrisgrieser/nvim-spider/pull/4>

**About Me** In my day job, I am a sociologist studying the social mechanisms
underlying the digital economy. For my PhD project, I investigate the
governance of the app economy and how software ecosystems manage the tension
between innovation and compatibility. If you are interested in this subject,
feel free to get in touch.

**Blog** I also occassionally blog about vim: Nano Tips for Vim
<https://nanotipsforvim.prose.sh>

**Profiles** - Discord <https://discordapp.com/users/462774483044794368/> -
Academic Website <https://chris-grieser.de/> - GitHub
<https://github.com/chrisgrieser/> - Twitter <https://twitter.com/pseudo_meta>
- ResearchGate <https://www.researchgate.net/profile/Christopher-Grieser> -
LinkedIn <https://www.linkedin.com/in/christopher-grieser-ba693b17a/>

**Buy Me a Coffee**

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
