*spider.txt*             For NVIM v0.8.0            Last change: 2023 March 20

==============================================================================
Table of Contents                                   *spider-table-of-contents*

1. nvim-spider                                            |spider-nvim-spider|
  - Features                                     |spider-nvim-spider-features|
  - Installation                             |spider-nvim-spider-installation|
  - Configuration                           |spider-nvim-spider-configuration|
  - Limitations                               |spider-nvim-spider-limitations|
  - Credits                                       |spider-nvim-spider-credits|

==============================================================================
1. nvim-spider                                            *spider-nvim-spider*

Use the `w`, `e`, `b` motions like a spider. Considers camelCase and skips
insignificant punctuation.


- |spider-features|
    - |spider-camelcasemotion|
    - |spider-skipping-insignificant-punctuation|
    - |spider-text-object|
- |spider-installation|
- |spider-configuration|
- |spider-limitations|
- |spider-credits|


FEATURES                                         *spider-nvim-spider-features*

The `w`, `e`, and `b` motions work the same as the default ones by vim, except
for two differences:


CAMELCASEMOTION ~

The movements happen by subwords, meaning it stops at the sub-parts of an
CamelCase (or SCREAMING_SNAKE_CASE or kebab-case) variable are considered
words.

>lua
    -- positions vim's `w` will move to
    local myVariableName = FOO_BAR_BAZ
    --    ^              ^ ^
    
    -- positions spider's `w` will move to
    local myVariableName = FOO_BAR_BAZ
    --    ^ ^       ^      ^   ^   ^
<


SKIPPING INSIGNIFICANT PUNCTUATION ~

This speeds up the movement across the line by reducing the number of
keypresses needed.

>lua
    -- positions vim's `w` will move to
    if foo:find("%d") then print("[foo] has" .. "digit") end
    -- ^  ^^   ^  ^^  ^    ^    ^  ^    ^  ^ ^  ^^    ^  ^   -> 17
    
    -- positions spider's `w` will move to
    if foo:find("%d") then print("[foo] has" .. "digit") end
    -- ^   ^   ^  ^   ^    ^    ^  ^    ^        ^       ^   -> 11
<

Insignificant punctuation like `:` or `")` are skipped. `("%` or `("[`,
however, are not skipped, since they consist of 3 consecutive punctuation
characters. (The minimum number of punctuation characters to not be skipped can
be configured.)


  **Note** vim’s `iskeyword` option is ignored by this plugin.

TEXT OBJECT ~

For an alternative `iw` text object that considers CamelCase word parts, check
out the "subword" text object of nvim-various-textobjs
<https://github.com/chrisgrieser/nvim-various-textobjs>.


INSTALLATION                                 *spider-nvim-spider-installation*

>lua
    -- packer
    use { 
        "chrisgrieser/nvim-spider" 
    }
    
    -- lazy.nvim
    {
        "chrisgrieser/nvim-spider",
        lazy = true,
        init = function() vim.g.spider_minimum_punctuation = 3 end,
    },
<

No `.setup()` function is required. No keybindings are created by default.
Below are the mappings to replace the default `w`, `e`, and `b` motions with
this plugin’s version of them.

>lua
    -- Keymaps
    vim.keymap.set({"n", "o", "x"}, "w", function() require("spider").motion("w") end, { desc = "Spider-w" })
    vim.keymap.set({"n", "o", "x"}, "e", function() require("spider").motion("e") end, { desc = "Spider-e" })
    vim.keymap.set({"n", "o", "x"}, "b", function() require("spider").motion("b") end, { desc = "Spider-b" })
<


CONFIGURATION                               *spider-nvim-spider-configuration*

>lua
    -- default
    vim.g.spider_minimum_punctuation = 3
    
    -- set to 1 to not skip any punctuation
    vim.g.spider_minimum_punctuation = 1
<


LIMITATIONS                                   *spider-nvim-spider-limitations*


- Counts are not yet implemented.
- Movements to the next line are not yet implemented.
- Dot repeats are not implemented. Dot-repeat _for text objects_ seems a bit more tricky, help is welcome. <https://github.com/chrisgrieser/nvim-various-textobjs/issues/7#issuecomment-1374861900>


CREDITS                                           *spider-nvim-spider-credits*

**Thanks** This is basically a port of the CamelCaseMotion
<https://github.com/bkad/CamelCaseMotion>, written in lua, and with some minor
improvements.

**About Me** In my day job, I am a sociologist studying the social mechanisms
underlying the digital economy. For my PhD project, I investigate the
governance of the app economy and how software ecosystems manage the tension
between innovation and compatibility. If you are interested in this subject,
feel free to get in touch.

**Profiles** - Discord <https://discordapp.com/users/462774483044794368/> -
Academic Website <https://chris-grieser.de/> - GitHub
<https://github.com/chrisgrieser/> - Twitter <https://twitter.com/pseudo_meta>
- ResearchGate <https://www.researchgate.net/profile/Christopher-Grieser> -
LinkedIn <https://www.linkedin.com/in/christopher-grieser-ba693b17a/>

**Buy Me a Coffee**

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
